<?php

namespace $NAMESPACE_CONTROLLER$;

use $NAMESPACE_REQUEST$\Create$MODEL_NAME$Request;
use $NAMESPACE_REQUEST$\Update$MODEL_NAME$Request;
use $NAMESPACE_INTERFACE$\$MODEL_NAME$RepositoryInterface;
use $NAMESPACE_APP$\Http\Controllers\AppBaseController;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\View\View;
use Inertia\Inertia;

/**
 * $NAMESPACE_CONTROLLER$\$MODEL_NAME$Controller $MODEL_NAME$Controller
 *
 * The CRUD controller for $MODEL_NAME$
 * Class $MODEL_NAME$Controller
 *
 * @package   $LICENSE_PACKAGE$
 * @author    $LICENSE_AUTHORS$
 * @copyright $LICENSE_COPYRIGHT$
 * @license   $LICENSE$
 */
class $MODEL_NAME$Controller extends AppBaseController
{
    /**
     * The Model repository.
     *
     * @var $MODEL_NAME$RepositoryInterface
     */
    private $$MODEL_NAME_CAMEL$Repository;

    /**
     * Constructor for the $MODEL_NAME$Controller.
     *
     * @param $MODEL_NAME$RepositoryInterface $$MODEL_NAME_CAMEL$Repo Model Respository
     */
    public function __construct($MODEL_NAME$RepositoryInterface $$MODEL_NAME_CAMEL$Repo)
    {
        $this->$MODEL_NAME_CAMEL$Repository = $$MODEL_NAME_CAMEL$Repo;
    }

    /**
     * Display a listing of the $MODEL_NAME$.
     *
     * @param Request $request Request
     *
     * @return View
     */
    public function index(Request $request)
    {
        $actions = [
            [
                'class' => 'ghost-primary',
                'route' => '',
                'icon' => 'fad fa-fw fa-plus',
                'name' => 'crud.create',
            ],
        ];

        $$MODEL_NAME_PLURAL_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->$RENDER_TYPE$;

        return Inertia::render('$VUE_PREFIX$$MODEL_NAME_PLURAL_SNAKE$/Index', compact('$MODEL_NAME_PLURAL_CAMEL$'))
            ->with('pageActions', $actions);
    }

    /**
     * Show the form for creating a new $MODEL_NAME$.
     *
     * @return View
     */
    public function create()
    {
        return Inertia::render('$VUE_PREFIX$$MODEL_NAME_PLURAL_SNAKE$/Create');
    }

    /**
     * Store a newly created $MODEL_NAME$ in storage.
     *
     * @param Create$MODEL_NAME$Request $request Create request
     *
     * @return RedirectResponse
     */
    public function store(Create$MODEL_NAME$Request $request)
    {
        $input = $request->all();

        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->create($input);

        Flash::success(__('messages.saved', ['model' => __('models/$MODEL_NAME_PLURAL_CAMEL$.singular')]));

        return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
    }

    /**
     * Display the specified $MODEL_NAME$.
     *
     * @param int $id Model ID
     *
     * @return View|RedirectResponse
     */
    public function show($id)
    {
        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->find($id);

        if (true === empty($$MODEL_NAME_CAMEL$)) {
            Flash::error(__('messages.not_found', ['model' => __('models/$MODEL_NAME_PLURAL_CAMEL$.singular')]));

            return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
        }

        return Inertia::render('$VUE_PREFIX$$MODEL_NAME_PLURAL_SNAKE$/Show', compact('$MODEL_NAME_CAMEL$'));
    }

    /**
     * Show the form for editing the specified $MODEL_NAME$.
     *
     * @param int $id Model ID
     *
     * @return View|RedirectResponse
     */
    public function edit($id)
    {
        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->find($id);

        if (true === empty($$MODEL_NAME_CAMEL$)) {
            Flash::error(__('messages.not_found', ['model' => __('models/$MODEL_NAME_PLURAL_CAMEL$.singular')]));

            return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
        }

        return Inertia::render('$VUE_PREFIX$$MODEL_NAME_PLURAL_SNAKE$/Edit', compact('$MODEL_NAME_CAMEL$'));
    }

    /**
     * Update the specified $MODEL_NAME$ in storage.
     *
     * @param int $id Model ID
     * @param Update$MODEL_NAME$Request $request Update Request
     *
     * @return RedirectResponse
     */
    public function update($id, Update$MODEL_NAME$Request $request)
    {
        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->find($id);

        if (true === empty($$MODEL_NAME_CAMEL$)) {
            Flash::error(__('messages.not_found', ['model' => __('models/$MODEL_NAME_PLURAL_CAMEL$.singular')]));

            return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
        }

        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->update($request->all(), $id);

        Flash::success(__('messages.updated', ['model' => __('models/$MODEL_NAME_PLURAL_CAMEL$.singular')]));

        return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
    }

    /**
     * Remove the specified $MODEL_NAME$ from storage.
     *
     * @param int $id Model ID
     *
     * @throws \Exception
     *
     * @return RedirectResponse
     */
    public function destroy($id)
    {
        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->find($id);

        if (true === empty($$MODEL_NAME_CAMEL$)) {
            Flash::error(__('messages.not_found', ['model' => __('models/$MODEL_NAME_PLURAL_CAMEL$.singular')]));

            return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
        }

        $this->$MODEL_NAME_CAMEL$Repository->delete($id);

        Flash::success(__('messages.deleted', ['model' => __('models/$MODEL_NAME_PLURAL_CAMEL$.singular')]));

        return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
    }
}
